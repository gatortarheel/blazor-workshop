@page "/"
@inject HttpClient HttpClient // inject directive newProperty newPropertyName - uses dependency injection

<h1>Custom Wood Working</h1>

@code {
    List<PizzaSpecial> specials;
    Pizza configuringPizza;
    bool showingConfigureDialog;
    Order order = new Order(); // new 

    List<WoodProduct> portfolio;
    WoodProduct configuringProduct;
    bool showingConfigureProductDialog;
    ProductOrder productOrder = new ProductOrder();

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");

        portfolio = await HttpClient.GetFromJsonAsync<List<WoodProduct>>("portfolio");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    // end pizza functions //

    // start wood product functions //

    void CancelConfigureProductDialog()
    {
        configuringProduct = null;
        showingConfigureProductDialog = false;
    }

    void ConfirmConfigureProductDialog()
    {
        productOrder.WoodProducts.Add(configuringProduct);
        configuringProduct = null;
        showingConfigureDialog = false;
    }

    void ShowConfigureProductDialog(WoodProduct product)
    {
        configuringProduct = new WoodProduct()
        {
            Id = product.Id,
            BasePrice = product.BasePrice,
            Description = product.Description,
            ImageUrl = product.ImageUrl,
            Name = product.Name,
            Customizations = new List<Customization>(),
        };

        showingConfigureProductDialog = true;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await HttpClient.PostAsJsonAsync("orders", order);
        order = new Order();
    }
}

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog" />
}

@if (showingConfigureProductDialog)
{
    <ConfigureWoodProduct WoodProduct="configuringProduct" OnCancelWood="CancelConfigureProductDialog" OnConfirmWood="ConfirmConfigureProductDialog"/>
}


<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var product in portfolio)
            {
                <li @onclick="@(() => ShowConfigureProductDialog(product))" style="background-image: url('@product.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@product.Name</span>
                        @product.Description
                        <span class="price">@product.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>
